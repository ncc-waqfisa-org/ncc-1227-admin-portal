type Attachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  cprDoc: String
  signedContractDoc: String
  transcriptDoc: String
  schoolCertificate: String
}

type Application @model @auth(rules: [{ allow: public }]) {
  id: ID! @index(name: "byDateTime", sortKeyFields: ["dateTime"])
  gpa: Float
  verifiedGPA: Float
  status: Status
  attachmentID: String
  adminLogs: [AdminLog] @hasMany
  studentLogs: [StudentLog] @hasMany
  attachment: Attachment @hasOne
  programs: [ProgramChoice] @hasMany
  dateTime: AWSDateTime!
  isEmailSent: Boolean @default(value: "false")
  nationalityCategory: Nationality
    @index(name: "byNationalityCategory", sortKeyFields: ["batch"])
  familyIncome: FamilyIncome
  schoolName: String
  schoolType: SchoolType
  studentName: String
  programID: ID
  program: Program @belongsTo(fields: ["programID"])
  universityID: ID
  university: University @belongsTo(fields: ["universityID"])
  studentCPR: String! @index(name: "byCPR", sortKeyFields: ["gpa"])

  student: Student @belongsTo(fields: ["studentCPR"])
  #  batchID: ID! @index(name: "byBatchRelation") @default(value: "48745538-4051-4c99-ad0f-7be0cac6cf16")
  batch: Int @index(name: "byBatch", sortKeyFields: ["status"])
  #  batchRelation: Batch @belongsTo(fields: ["batchID"])
  # add a new field to the Application model called "score" that is a Float and is indexed for sorting
  score: Float @index(name: "byScore", sortKeyFields: ["status"])
  adminPoints: Int
  processed: Int @index(name: "byProcessed", sortKeyFields: ["batch"])
  isFamilyIncomeVerified: Boolean
  reason: String
}

type ProgramChoice @model @auth(rules: [{ allow: public }]) {
  id: ID!
  programID: ID!
  applicationID: ID!
  program: Program @belongsTo(fields: ["programID"])
  application: Application @belongsTo(fields: ["applicationID"])
  choiceOrder: Int
  acceptanceLetterDoc: String
}

type Program @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  minimumGPA: Float
  requirements: String
  nameAr: String @default(value: "-")
  requirementsAr: String @default(value: "-")
  availability: Int
  universityID: ID!
  university: University @belongsTo(fields: ["universityID"])
  applications: [ProgramChoice] @hasMany
  isDeactivated: Boolean
  isTrashed: Boolean @default(value: "false")
  application: [Application] @hasMany
}

type University @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String
  nameAr: String @default(value: "-")
  Programs: [Program] @hasMany
  availability: Int @default(value: "0")
  isDeactivated: Boolean
  isExtended: Int @index(name: "byExtended", sortKeyFields: ["name"])
  extensionDuration: Int
  isException: Int @index(name: "byException")
  isTrashed: Boolean @default(value: "false")
  applications: [Application] @hasMany
}

type AdminLog @model @auth(rules: [{ allow: public }]) {
  id: ID!
  applicationID: ID!
  adminCPR: String!
  dateTime: AWSDateTime
  snapshot: String
  reason: String
  admin: Admin @belongsTo(fields: ["adminCPR"])
}

type StudentLog @model @auth(rules: [{ allow: public }]) {
  id: ID!
  applicationID: ID!
  studentCPR: String!
  dateTime: AWSDateTime
  snapshot: String
  reason: String
  student: Student @belongsTo(fields: ["studentCPR"])
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

type Admin @model @auth(rules: [{ allow: public }]) {
  # id : ID! @primaryKey
  cpr: String! @primaryKey #index by CPR
  fullName: String
  email: String
  AdminLogs: [AdminLog] @hasMany
  role: AdminRole
  isDeactivated: Boolean
}
# mutation Admin ()
enum Status {
  APPROVED
  ELIGIBLE
  REVIEW
  NOT_COMPLETED
  REJECTED
  WITHDRAWN
}

type ParentInfo @model @auth(rules: [{ allow: public }]) {
  id: ID!
  guardianFullName: String
  relation: String
  guardianCPR: String
  primaryMobile: String
  secondaryMobile: String
  fatherFullName: String
  fatherCPR: String
  motherFullName: String
  motherCPR: String
  numberOfFamilyMembers: Int
  address: String
}

enum Language {
  ARABIC
  ENGLISH
}

enum Gender {
  FEMALE
  MALE
}

enum SchoolType {
  PRIVATE
  PUBLIC
}

enum Nationality {
  BAHRAINI
  NON_BAHRAINI
}

type Student @model @auth(rules: [{ allow: public }]) {
  cpr: String! @primaryKey
  cprDoc: String
  fullName: String
  batch: Int
  email: String
  phone: String
  gender: Gender
  nationalityCategory: Nationality
    @index(name: "byNationalityCategory", sortKeyFields: ["graduationDate"])
  nationality: String
  schoolName: String
  schoolType: SchoolType
  specialization: String
  placeOfBirth: String
  studentOrderAmongSiblings: Int
  #  householdIncome: Float
  familyIncome: FamilyIncome
  familyIncomeProofDoc: String
  familyIncomeProofDocs: [String]
  preferredLanguage: Language
  graduationDate: AWSDate
  address: String
  applications: [Application] @hasMany(indexName: "byCPR", fields: ["cpr"])
  ParentInfo: ParentInfo @hasOne(fields: ["parentInfoID"])
  parentInfoID: ID
  StudentLogs: [StudentLog] @hasMany

  # MASTER THINGS
  m_MasterLogs: [MasterLog] @hasMany
  m_firstName: String
  m_secondName: String
  m_lastName: String
  m_numberOfFamilyMembers: Int
  m_graduationYear: String
  m_university: BahrainUniversities @belongsTo(fields: ["m_universityID"])
  m_universityID: ID @index(name: "byBahrianUniversity") # it's not mandetory but if it's provided it to initialize the relationships
  m_oldProgram: String # This is must be removed later
  m_applicantType: [ApplicantType!]!
  m_isEmployed: Boolean
  m_placeOfEmployment: String
  m_income: Income
  m_incomeDoc: String
  m_guardianCPR: String
  m_guardianFullName: String
  m_guardianCPRDoc: String
  m_masterApplications: [MasterApplication]
    @hasMany(indexName: "byMasterStudentCPR", fields: ["cpr"])
}

type Batch @model @auth(rules: [{ allow: public }]) {
  batch: Int! @primaryKey
  createApplicationStartDate: AWSDate
  createApplicationEndDate: AWSDate
  updateApplicationEndDate: AWSDate
  signUpStartDate: AWSDate
  signUpEndDate: AWSDate
  #  updateExceptions: AWSJSON
  #  applications: [Application] @hasMany(indexName: "byBatchRelation", fields: ["id"])
}

type Scholarship @model @auth(rules: [{ allow: public }]) {
  id: ID!
  status: ScholarshipStatus
  applicationID: ID! @index(name: "byApplication")
  batch: Int @index(name: "byBatch", sortKeyFields: ["status"])
  isConfirmed: Boolean
  application: Application @hasOne(fields: ["applicationID"])
  studentCPR: String @index(name: "byCPR", sortKeyFields: ["status"])
  unsignedContractDoc: String
  signedContractDoc: String
  studentSignature: String
  guardianSignature: String
  bankName: String
  IBAN: String
  IBANLetterDoc: String
}

type Statistics @model @auth(rules: [{ allow: public }]) {
  id: Int! @primaryKey
  batch: Int! @index(name: "byBatch", sortKeyFields: ["totalApplications"])
  totalApplications: Int
  totalApplicationsPerStatus: AWSJSON
  scoreHistogram: AWSJSON
  gpaHistogram: AWSJSON
  totalApplicationsPerUniversity: AWSJSON
  #  topPrograms: AWSJSON
  topUniversities: AWSJSON
  topPrograms: AWSJSON
  familyIncome: AWSJSON
  schoolType: AWSJSON
  students: AWSJSON
  applications: AWSJSON
  today: AWSJSON
}

enum FamilyIncome {
  LESS_THAN_500
  BETWEEN_500_AND_700
  BETWEEN_700_AND_1000
  LESS_THAN_1500
  MORE_THAN_1500
  OVER_1000
}

enum ScholarshipStatus {
  APPROVED
  PENDING
  REJECTED
  WITHDRAWN
}

# MASTER Tables
type MasterBatch @model @auth(rules: [{ allow: public }]) {
  batch: Int! @primaryKey
  createApplicationStartDate: AWSDate
  createApplicationEndDate: AWSDate
  updateApplicationEndDate: AWSDate
  signUpStartDate: AWSDate
  signUpEndDate: AWSDate
}

type MasterLog @model @auth(rules: [{ allow: public }]) {
  id: ID!
  applicationID: ID!
  studentCPR: String!
  dateTime: AWSDateTime
  snapshot: String
  reason: String
  student: Student @belongsTo(fields: ["studentCPR"])
}

# Master universities
# This means that universities that students come from
type BahrainUniversities @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  universityName: String
  universityNameAr: String
  isDeactivated: Boolean
  students: [Student] @hasMany(indexName: "byBahrianUniversity", fields: ["id"])
}
# These are universities that student want to apply to
type MasterUniversities @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  universityName: String!
  universityNameAr: String!
  isDeactivated: Boolean
  applications: [MasterApplication] @hasMany(fields: ["id"])
}

# Since we don't store any details
type MasterApplication @model @auth(rules: [{ allow: public }]) {
  id: ID! @index(name: "byMasterDateTime", sortKeyFields: ["dateTime"])
  gpa: Float
  verifiedGPA: Float
  status: Status
  # attachmentID: String #check first
  adminLogs: [AdminLog] @hasMany
  masterLogs: [MasterLog] @hasMany
  attachment: MasterAttachment @hasOne
  program: String
  dateTime: AWSDateTime!
  isEmailSent: Boolean @default(value: "false")
  nationalityCategory: Nationality
    @index(name: "byMasterNationalityCategory", sortKeyFields: ["batch"])
  universityID: ID! # Make this required since @belongsTo relies on it
  university: MasterUniversities @belongsTo(fields: ["universityID"])
  studentCPR: String! @index(name: "byMasterStudentCPR", sortKeyFields: ["gpa"])
  studentName: String
  student: Student @belongsTo(fields: ["studentCPR"])
  batch: Int @index(name: "byMasterBatch", sortKeyFields: ["status"])
  score: Float @index(name: "byMasterScore", sortKeyFields: ["status"])
  adminPoints: Int
  processed: Int @index(name: "byMasterProcessed", sortKeyFields: ["batch"])
  isIncomeVerified: Boolean
  major: Major
  reason: String
  income: Income
  incomeDoc: String
}

type MasterStatistics @model @auth(rules: [{ allow: public }]) {
  id: Int! @primaryKey
  batch: Int!
    @index(name: "byMasterBatchStat", sortKeyFields: ["totalApplications"])
  totalApplications: Int
  totalApplicationsPerStatus: AWSJSON
  scoreHistogram: AWSJSON
  gpaHistogram: AWSJSON
  totalApplicationsPerUniversity: AWSJSON
  #  topPrograms: AWSJSON
  topUniversities: AWSJSON
  topPrograms: AWSJSON
  familyIncome: AWSJSON
  schoolType: AWSJSON
  students: AWSJSON
  applications: AWSJSON
  today: AWSJSON
}

type MasterAttachment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  cprDoc: String
  signedContractDoc: String
  transcriptDoc: String
  universityCertificate: String
  toeflIELTSCertificate: String
  acceptanceLetterDoc: String
}

type MasterScholarship @model @auth(rules: [{ allow: public }]) {
  id: ID!
  status: ScholarshipStatus
  applicationID: ID! @index(name: "byMasterApplication")
  batch: Int @index(name: "byMasterBatchApp", sortKeyFields: ["status"])
  isConfirmed: Boolean
  application: MasterApplication @hasOne(fields: ["applicationID"])
  studentCPR: String @index(name: "byMasterCPR", sortKeyFields: ["status"])
  unsignedContractDoc: String
  signedContractDoc: String
  studentSignature: String
  guardianSignature: String
  bankName: String
  IBAN: String
  IBANLetterDoc: String
}

# Master Enum
enum ApplicantType {
  STUDENT
  MASTER
}

enum Income {
  LESS_THAN_1500
  MORE_THAN_1500
}

enum Major {
  SCIENCE
  TECHNOLOGY
  ENGINEERING
}
